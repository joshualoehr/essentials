# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it here:
# https://github.com/bevry/cson#what-is-cson
'.source.js':
  'Read File':
    'prefix': 'rf'
    'body': 'fs.readFile(path.join(__dirname, ${1:filepath}), \'utf-8\', function(err, data) {\n    if (err) throw err;\n    $2\n});'

  'Read File Sync':
    'prefix': 'rfs'
    'body': 'fs.readFileSync(path.join(__dirname, ${1:filepath}), \'utf-8\');$2'

  'Write File':
    'prefix': 'wf'
    'body': 'fs.writeFile(path.join(__dirname, ${1:filepath}), ${2:data}, function(err) {\n    if(err) throw err;\n    $3\n});'

  'Write File Sync':
    'prefix': 'wfs'
    'body': 'fs.writeFileSync(path.join(__dirname, ${1:filepath}), ${2:data});$3'

  'Incrementing For Loop':
    'prefix': 'ifor'
    'body': 'for(var i = ${1:0}; i < $2; i++) {\n    $3\n}'

  'Decrementing For Loop':
    'prefix': 'dfor'
    'body': 'for(var i = ${1:.length - 1}; i >= ${2:0}; i--) {\n    $3\n}'

  'Document':
    'prefix': 'doc'
    'body': '/**\n* ${1:Description}\n* \n* @${2:method}\n* @${3:param}\n* @${4:return}\n* @${5:example}\n* \n* \n* \n* \n*/'

  'Method':
    'prefix': 'meth',
    'body': """
      /**
      * ${1:Method Description}
      *
      * @method ${2:methodName}
      * @param ${3:paramName} {${4:Object}}${5:\n* @return }
      * @example
      *
      *
      *
      *
      */
      this.${2:methodName} = function(${3:paramName}) {
          $6${5:\n\n    return }
      }
    """

  'Object Keys':
    'prefix': 'keys'
    'body': 'Object.keys(${1:map})$2'

  'For Each v1':
    'prefix': 'fe'
    'body': '${1:arr}.forEach(function(${2:val}) {\n    $3\n});$4'

  'For Each v2':
    'prefix': 'foreach'
    'body': 'forEach(function(${1:val}) {\n    $2\n});$3'

  'Function':
    'prefix': 'fn'
    'body': """
      function ${1:methodName}(${2:arguments}) {
          ${3}
      }
    """

  'Anonymous Function':
    'prefix': 'afn'
    'body': """
      function(${1:arguments}) {
          ${2}
      }
    """

  'Object Property Function':
    'prefix': 'ofn'
    'body': """
      ${1:functionName}: function (${2:arguments}) {
          ${3}
      }
    """

  'Documented Object Property Function':
    'prefix': 'docofn'
    'body': """
      /**
      * ${1:Function Description}
      *
      * @method ${2:functionName}
      * @param ${3:arguments} {${4:type}}${5:\n* @return }
      * @example
      *
      *
      *
      */
      ${2:functionName}: function (${3:arguments}) {
          $6${5:\n\nreturn }
      }
    """

  'Local Require':
    'prefix': 'lreq'
    'body': 'var ${1:module} = require(\'${2:.}/${1:module}.js\');'

  'Parse Object From JSON':
    'prefix': 'pjson'
    'body': """
      fs.readFile(path.join(__dirname, ${1:filepath}), 'utf-8', function(err, data) {
          if (err) ${2:throw err};

          var ${3:obj} = JSON.parse(data);
          $4
      });
    """

  'Read Object From JSON Synchronously':
    'prefix': 'pjsons'
    'body': """
      var data = fs.readFileSync(path.join(__dirname, ${1:filepath}), 'utf-8');
      var ${2:obj} = JSON.parse(data);
      $3
    """
